{"ast":null,"code":"//fetch current & fetch forecast functions\nimport axios from 'axios';\nconst WEATHER_KEY = process.env.GOOGLE_WEATHER_API_KEY;\nconst GEOCODE_KEY = process.env.GOOGLE_GEOCODING_API_KEY;\nconst WEATHER_BASE_URL = \"https://weather.googleapis.com/v1\";\nconst GEOCODE_BASE_URL = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\n//Convert a city name to latitude and longitude coordinates using the Google Geocoding API\n//coordinate format is {lat, lon}\n/*\nexport function geocodeCity(city) {\n    return axios.get(GEOCODE_BASE_URL, {\n        params: {\n            address: city,\n            key: GEOCODE_KEY,\n        },\n    })\n    .then(res => { const {lat, lng} = res.data.results[0].geometry.location;\n        return { lat, lon: lng };\n});\n}*/\n\n//Get current conditions for the given coordinates\n//We can use metric or imperial system\nexport function fetchCurrentByCoords(coords, unitsSystem = 'METRIC') {\n  return axios.get('${WEATHER_BASE_URL}/currentConditions:lookup', {\n    params: {\n      key: WEATHER_KEY,\n      'location.latitude': coords.lat,\n      'location.longitude': coords.lon,\n      unitsSystem\n    }\n  }).then(res => res.data);\n}\n\n//Get up to 'days' (param) days of faily forecasts\n//max 10 days, optional pagination\nexport function fetchDailyForecastByCoords(coords, days = 5, pageSize = days) {\n  return axios.get('${WEATHER_BASE_URL}/forecast/days:lookup', {\n    params: {\n      key: WEATHER_KEY,\n      'location.latitude': coords.lat,\n      'location.longitude': coords.lon,\n      days,\n      pageSize\n    }\n  }).then(res => res.data);\n}\n\n//Get up to 'hours' (param) hours of hourly forecasts\n//max 24 hours, optional pagination\nexport function fetchHourlyForecastByCoords(coords, hours = 24, pageSize = hours) {\n  return axios.get('${WEATHER_BASE_URL}/forecast/hours:lookup', {\n    params: {\n      key: WEATHER_KEY,\n      'location.latitude': coords.lat,\n      'location.longitude': coords.lon,\n      hours,\n      pageSize\n    }\n  }).then(res => res.data);\n}","map":{"version":3,"names":["axios","WEATHER_KEY","process","env","GOOGLE_WEATHER_API_KEY","GEOCODE_KEY","GOOGLE_GEOCODING_API_KEY","WEATHER_BASE_URL","GEOCODE_BASE_URL","fetchCurrentByCoords","coords","unitsSystem","get","params","key","lat","lon","then","res","data","fetchDailyForecastByCoords","days","pageSize","fetchHourlyForecastByCoords","hours"],"sources":["/Users/dfashemo/seoTechDev/weatherApp/src/api/weather.js"],"sourcesContent":["//fetch current & fetch forecast functions\nimport axios from 'axios';\n\nconst WEATHER_KEY = process.env.GOOGLE_WEATHER_API_KEY;\nconst GEOCODE_KEY = process.env.GOOGLE_GEOCODING_API_KEY;\nconst WEATHER_BASE_URL = \"https://weather.googleapis.com/v1\";\nconst GEOCODE_BASE_URL = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\n\n//Convert a city name to latitude and longitude coordinates using the Google Geocoding API\n//coordinate format is {lat, lon}\n/*\nexport function geocodeCity(city) {\n    return axios.get(GEOCODE_BASE_URL, {\n        params: {\n            address: city,\n            key: GEOCODE_KEY,\n        },\n    })\n    .then(res => { const {lat, lng} = res.data.results[0].geometry.location;\n        return { lat, lon: lng };\n});\n}*/\n\n\n//Get current conditions for the given coordinates\n//We can use metric or imperial system\nexport function fetchCurrentByCoords(coords, unitsSystem = 'METRIC') {\n    return axios.get('${WEATHER_BASE_URL}/currentConditions:lookup', {\n        params: {\n            key: WEATHER_KEY,\n            'location.latitude': coords.lat,\n            'location.longitude': coords.lon,\n            unitsSystem,\n        },\n    })\n    .then(res => res.data);\n}\n\n//Get up to 'days' (param) days of faily forecasts\n//max 10 days, optional pagination\nexport function fetchDailyForecastByCoords(coords, days = 5, pageSize = days) {\n    return axios.get('${WEATHER_BASE_URL}/forecast/days:lookup', {\n        params: {\n            key: WEATHER_KEY,\n            'location.latitude': coords.lat,\n            'location.longitude': coords.lon,\n            days,\n            pageSize,\n        },\n    })\n    .then(res => res.data);\n}\n\n//Get up to 'hours' (param) hours of hourly forecasts\n//max 24 hours, optional pagination\nexport function fetchHourlyForecastByCoords(coords, hours = 24, pageSize = hours) {\n    return axios.get('${WEATHER_BASE_URL}/forecast/hours:lookup', {\n        params: {\n            key: WEATHER_KEY,\n            'location.latitude': coords.lat,\n            'location.longitude': coords.lon,\n            hours,\n            pageSize,\n        },\n    })\n    .then(res => res.data);\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,wBAAwB;AACxD,MAAMC,gBAAgB,GAAG,mCAAmC;AAC5D,MAAMC,gBAAgB,GAAG,mDAAmD;;AAG5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,MAAM,EAAEC,WAAW,GAAG,QAAQ,EAAE;EACjE,OAAOX,KAAK,CAACY,GAAG,CAAC,8CAA8C,EAAE;IAC7DC,MAAM,EAAE;MACJC,GAAG,EAAEb,WAAW;MAChB,mBAAmB,EAAES,MAAM,CAACK,GAAG;MAC/B,oBAAoB,EAAEL,MAAM,CAACM,GAAG;MAChCL;IACJ;EACJ,CAAC,CAAC,CACDM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;AAC1B;;AAEA;AACA;AACA,OAAO,SAASC,0BAA0BA,CAACV,MAAM,EAAEW,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAGD,IAAI,EAAE;EAC1E,OAAOrB,KAAK,CAACY,GAAG,CAAC,0CAA0C,EAAE;IACzDC,MAAM,EAAE;MACJC,GAAG,EAAEb,WAAW;MAChB,mBAAmB,EAAES,MAAM,CAACK,GAAG;MAC/B,oBAAoB,EAAEL,MAAM,CAACM,GAAG;MAChCK,IAAI;MACJC;IACJ;EACJ,CAAC,CAAC,CACDL,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;AAC1B;;AAEA;AACA;AACA,OAAO,SAASI,2BAA2BA,CAACb,MAAM,EAAEc,KAAK,GAAG,EAAE,EAAEF,QAAQ,GAAGE,KAAK,EAAE;EAC9E,OAAOxB,KAAK,CAACY,GAAG,CAAC,2CAA2C,EAAE;IAC1DC,MAAM,EAAE;MACJC,GAAG,EAAEb,WAAW;MAChB,mBAAmB,EAAES,MAAM,CAACK,GAAG;MAC/B,oBAAoB,EAAEL,MAAM,CAACM,GAAG;MAChCQ,KAAK;MACLF;IACJ;EACJ,CAAC,CAAC,CACDL,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}