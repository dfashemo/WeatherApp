{"ast":null,"code":"var _s = $RefreshSig$();\n//oads current & forecast when city changes\nimport { useState, useEffect } from 'react';\nimport { fetchCurrentByCoords, fetchDailyForecastByCoords, fetchHourlyForecastByCoords, geocodeCity } from '../api/weather';\n\n//Hook to fetch current, daily, and hourly data either by city name or coordinates\nexport function useWeather({\n  city = null,\n  geo = null\n} = {}) {\n  _s();\n  const [current, setCurrent] = useState(null);\n  const [daily, setDaily] = useState(null);\n  const [hourly, setHourly] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let cancelled = false;\n    async function loadWeather() {\n      setLoading(true);\n      setError(null);\n      try {\n        //Determine coords\n        const coords = city ? await geocodeCity(city) : {\n          lat: geo.lat,\n          lon: geo.lon\n        };\n\n        //Fetch current, daily & hourly in parallel\n        const [curRes, dayRes, hrRes] = await Promise.all([fetchCurrentByCoords(coords, units), fetchDailyForecastByCoords(coords, 5, 5, units), fetchHourlyForecastByCoords(coords, 24, 24)]);\n        if (!cancelled) {\n          setCurrent(curRes);\n          setDaily(dayRes.forecastDays || dayRes);\n          setHourly(hrRes.forecastHours || hrRes);\n        }\n      } catch (err) {\n        if (!cancelled) setError(err.message);\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n\n    //Only trigger if we have either a non‐empty city or valid geo coords\n    if (city && city.trim().length > 0 || geo && typeof geo.lat === 'number' && typeof geo.lon === 'number') {\n      loadWeather();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [city, geo]);\n  return {\n    current,\n    daily,\n    hourly,\n    loading,\n    error\n  };\n}\n_s(useWeather, \"Q7gFzszGw9gan/xybBG/b11ycvM=\");","map":{"version":3,"names":["useState","useEffect","fetchCurrentByCoords","fetchDailyForecastByCoords","fetchHourlyForecastByCoords","geocodeCity","useWeather","city","geo","_s","current","setCurrent","daily","setDaily","hourly","setHourly","loading","setLoading","error","setError","cancelled","loadWeather","coords","lat","lon","curRes","dayRes","hrRes","Promise","all","units","forecastDays","forecastHours","err","message","trim","length"],"sources":["/Users/dfashemo/seoTechDev/weatherApp/src/hooks/useWeather.js"],"sourcesContent":["//oads current & forecast when city changes\nimport {useState, useEffect} from 'react';\nimport { \n    fetchCurrentByCoords,\n    fetchDailyForecastByCoords,\n    fetchHourlyForecastByCoords,\n    geocodeCity \n} from '../api/weather';\n\n//Hook to fetch current, daily, and hourly data either by city name or coordinates\nexport function useWeather({ city = null, geo = null } = {}) {\n  const [current, setCurrent] = useState(null);\n  const [daily, setDaily]     = useState(null);\n  const [hourly, setHourly]   = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError]     = useState(null);\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function loadWeather() {\n      setLoading(true);\n      setError(null);\n\n      try {\n        //Determine coords\n        const coords = city\n          ? await geocodeCity(city)\n          : { lat: geo.lat, lon: geo.lon };\n\n        //Fetch current, daily & hourly in parallel\n        const [curRes, dayRes, hrRes] = await Promise.all([\n          fetchCurrentByCoords(coords, units),\n          fetchDailyForecastByCoords(coords, 5, 5, units),\n          fetchHourlyForecastByCoords(coords, 24, 24, ),\n        ]);\n\n        if (!cancelled) {\n          setCurrent(curRes);\n          setDaily(dayRes.forecastDays || dayRes);\n          setHourly(hrRes.forecastHours || hrRes);\n        }\n      } catch (err) {\n        if (!cancelled) setError(err.message);\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n\n    //Only trigger if we have either a non‐empty city or valid geo coords\n    if (\n      (city && city.trim().length > 0) ||\n      (geo && typeof geo.lat === 'number' && typeof geo.lon === 'number')\n    ) {\n      loadWeather();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [city, geo]);\n\n  return { current, daily, hourly, loading, error };\n}"],"mappings":";AAAA;AACA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,SACIC,oBAAoB,EACpBC,0BAA0B,EAC1BC,2BAA2B,EAC3BC,WAAW,QACR,gBAAgB;;AAEvB;AACA,OAAO,SAASC,UAAUA,CAAC;EAAEC,IAAI,GAAG,IAAI;EAAEC,GAAG,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,EAAE;EAAAC,EAAA;EAC3D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAOb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAKf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAOnB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,IAAImB,SAAS,GAAG,KAAK;IAErB,eAAeC,WAAWA,CAAA,EAAG;MAC3BJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF;QACA,MAAMG,MAAM,GAAGf,IAAI,GACf,MAAMF,WAAW,CAACE,IAAI,CAAC,GACvB;UAAEgB,GAAG,EAAEf,GAAG,CAACe,GAAG;UAAEC,GAAG,EAAEhB,GAAG,CAACgB;QAAI,CAAC;;QAElC;QACA,MAAM,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChD3B,oBAAoB,CAACoB,MAAM,EAAEQ,KAAK,CAAC,EACnC3B,0BAA0B,CAACmB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEQ,KAAK,CAAC,EAC/C1B,2BAA2B,CAACkB,MAAM,EAAE,EAAE,EAAE,EAAI,CAAC,CAC9C,CAAC;QAEF,IAAI,CAACF,SAAS,EAAE;UACdT,UAAU,CAACc,MAAM,CAAC;UAClBZ,QAAQ,CAACa,MAAM,CAACK,YAAY,IAAIL,MAAM,CAAC;UACvCX,SAAS,CAACY,KAAK,CAACK,aAAa,IAAIL,KAAK,CAAC;QACzC;MACF,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZ,IAAI,CAACb,SAAS,EAAED,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACvC,CAAC,SAAS;QACR,IAAI,CAACd,SAAS,EAAEH,UAAU,CAAC,KAAK,CAAC;MACnC;IACF;;IAEA;IACA,IACGV,IAAI,IAAIA,IAAI,CAAC4B,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,IAC9B5B,GAAG,IAAI,OAAOA,GAAG,CAACe,GAAG,KAAK,QAAQ,IAAI,OAAOf,GAAG,CAACgB,GAAG,KAAK,QAAS,EACnE;MACAH,WAAW,CAAC,CAAC;IACf;IAEA,OAAO,MAAM;MACXD,SAAS,GAAG,IAAI;IAClB,CAAC;EACH,CAAC,EAAE,CAACb,IAAI,EAAEC,GAAG,CAAC,CAAC;EAEf,OAAO;IAAEE,OAAO;IAAEE,KAAK;IAAEE,MAAM;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACnD;AAACT,EAAA,CArDeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}