{"ast":null,"code":"//fetch current & fetch forecast functions\nimport axios from 'axios';\nconst WEATHER_KEY = process.env.GOOGLE_WEATHER_API_KEY;\nconst GEOCODE_KEY = process.env.GOOGLE_GEOCODING_API_KEY;\nconst WEATHER_BASE_URL = \"https://weather.googleapis.com/v1\";\nconst GEOCODE_BASE_URL = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\n//Convert a city name to latitude and longitude coordinates using the Google Geocoding API\n//coordinate format is {lat, lon}\n/*\nexport function geocodeCity(city) {\n    return axios.get(GEOCODE_BASE_URL, {\n        params: {\n            address: city,\n            key: GEOCODE_KEY,\n        },\n    })\n    .then(res => { const {lat, lng} = res.data.results[0].geometry.location;\n        return { lat, lon: lng };\n});\n}*/\nexport async function geocodeCity(city) {\n  const {\n    data\n  } = await axios.get(GEI, {\n    params: {\n      address: city,\n      key: GEOCODE_KEY\n    }\n  });\n\n  // 1) API‐level error\n  if (data.status !== 'OK') {\n    throw new Error(data.error_message || `Geocoding failed with status \"${data.status}\".`);\n  }\n\n  // 2) No results at all\n  if (!data.results || data.results.length === 0) {\n    throw new Error(`No location found for “${city}”.`);\n  }\n\n  // 3) Safe to pull the first result\n  const {\n    lat,\n    lng\n  } = data.results[0].geometry.location;\n  return {\n    lat,\n    lon: lng\n  };\n}\n\n//Get current conditions for the given coordinates\n//We can use metric or imperial system\nexport function fetchCurrentByCoords(coords, unitsSystem = 'METRIC') {\n  return axios.get('${WEATHER_BASE_URL}/currentConditions:lookup', {\n    params: {\n      key: WEATHER_KEY,\n      'location.latitude': coords.lat,\n      'location.longitude': coords.lon,\n      unitsSystem\n    }\n  }).then(res => res.data);\n}\n\n//Get up to 'days' (param) days of faily forecasts\n//max 10 days, optional pagination\nexport function fetchDailyForecastByCoords(coords, days = 5, pageSize = days) {\n  return axios.get('${WEATHER_BASE_URL}/forecast/days:lookup', {\n    params: {\n      key: WEATHER_KEY,\n      'location.latitude': coords.lat,\n      'location.longitude': coords.lon,\n      days,\n      pageSize\n    }\n  }).then(res => res.data);\n}\n\n//Get up to 'hours' (param) hours of hourly forecasts\n//max 24 hours, optional pagination\nexport function fetchHourlyForecastByCoords(coords, hours = 24, pageSize = hours) {\n  return axios.get('${WEATHER_BASE_URL}/forecast/hours:lookup', {\n    params: {\n      key: WEATHER_KEY,\n      'location.latitude': coords.lat,\n      'location.longitude': coords.lon,\n      hours,\n      pageSize\n    }\n  }).then(res => res.data);\n}","map":{"version":3,"names":["axios","WEATHER_KEY","process","env","GOOGLE_WEATHER_API_KEY","GEOCODE_KEY","GOOGLE_GEOCODING_API_KEY","WEATHER_BASE_URL","GEOCODE_BASE_URL","geocodeCity","city","data","get","GEI","params","address","key","status","Error","error_message","results","length","lat","lng","geometry","location","lon","fetchCurrentByCoords","coords","unitsSystem","then","res","fetchDailyForecastByCoords","days","pageSize","fetchHourlyForecastByCoords","hours"],"sources":["/Users/dfashemo/seoTechDev/weatherApp/src/api/weather.js"],"sourcesContent":["//fetch current & fetch forecast functions\nimport axios from 'axios';\n\nconst WEATHER_KEY = process.env.GOOGLE_WEATHER_API_KEY;\nconst GEOCODE_KEY = process.env.GOOGLE_GEOCODING_API_KEY;\nconst WEATHER_BASE_URL = \"https://weather.googleapis.com/v1\";\nconst GEOCODE_BASE_URL = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\n\n//Convert a city name to latitude and longitude coordinates using the Google Geocoding API\n//coordinate format is {lat, lon}\n/*\nexport function geocodeCity(city) {\n    return axios.get(GEOCODE_BASE_URL, {\n        params: {\n            address: city,\n            key: GEOCODE_KEY,\n        },\n    })\n    .then(res => { const {lat, lng} = res.data.results[0].geometry.location;\n        return { lat, lon: lng };\n});\n}*/\nexport async function geocodeCity(city) {\n  const { data } = await axios.get(GEI, {\n    params: { address: city, key: GEOCODE_KEY },\n  });\n\n  // 1) API‐level error\n  if (data.status !== 'OK') {\n    throw new Error(\n      data.error_message ||\n      `Geocoding failed with status \"${data.status}\".`\n    );\n  }\n\n  // 2) No results at all\n  if (!data.results || data.results.length === 0) {\n    throw new Error(`No location found for “${city}”.`);\n  }\n\n  // 3) Safe to pull the first result\n  const { lat, lng } = data.results[0].geometry.location;\n  return { lat, lon: lng };\n}\n\n//Get current conditions for the given coordinates\n//We can use metric or imperial system\nexport function fetchCurrentByCoords(coords, unitsSystem = 'METRIC') {\n    return axios.get('${WEATHER_BASE_URL}/currentConditions:lookup', {\n        params: {\n            key: WEATHER_KEY,\n            'location.latitude': coords.lat,\n            'location.longitude': coords.lon,\n            unitsSystem,\n        },\n    })\n    .then(res => res.data);\n}\n\n//Get up to 'days' (param) days of faily forecasts\n//max 10 days, optional pagination\nexport function fetchDailyForecastByCoords(coords, days = 5, pageSize = days) {\n    return axios.get('${WEATHER_BASE_URL}/forecast/days:lookup', {\n        params: {\n            key: WEATHER_KEY,\n            'location.latitude': coords.lat,\n            'location.longitude': coords.lon,\n            days,\n            pageSize,\n        },\n    })\n    .then(res => res.data);\n}\n\n//Get up to 'hours' (param) hours of hourly forecasts\n//max 24 hours, optional pagination\nexport function fetchHourlyForecastByCoords(coords, hours = 24, pageSize = hours) {\n    return axios.get('${WEATHER_BASE_URL}/forecast/hours:lookup', {\n        params: {\n            key: WEATHER_KEY,\n            'location.latitude': coords.lat,\n            'location.longitude': coords.lon,\n            hours,\n            pageSize,\n        },\n    })\n    .then(res => res.data);\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,wBAAwB;AACxD,MAAMC,gBAAgB,GAAG,mCAAmC;AAC5D,MAAMC,gBAAgB,GAAG,mDAAmD;;AAG5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAACC,IAAI,EAAE;EACtC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACC,GAAG,EAAE;IACpCC,MAAM,EAAE;MAAEC,OAAO,EAAEL,IAAI;MAAEM,GAAG,EAAEX;IAAY;EAC5C,CAAC,CAAC;;EAEF;EACA,IAAIM,IAAI,CAACM,MAAM,KAAK,IAAI,EAAE;IACxB,MAAM,IAAIC,KAAK,CACbP,IAAI,CAACQ,aAAa,IAClB,iCAAiCR,IAAI,CAACM,MAAM,IAC9C,CAAC;EACH;;EAEA;EACA,IAAI,CAACN,IAAI,CAACS,OAAO,IAAIT,IAAI,CAACS,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9C,MAAM,IAAIH,KAAK,CAAC,0BAA0BR,IAAI,IAAI,CAAC;EACrD;;EAEA;EACA,MAAM;IAAEY,GAAG;IAAEC;EAAI,CAAC,GAAGZ,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACC,QAAQ;EACtD,OAAO;IAAEH,GAAG;IAAEI,GAAG,EAAEH;EAAI,CAAC;AAC1B;;AAEA;AACA;AACA,OAAO,SAASI,oBAAoBA,CAACC,MAAM,EAAEC,WAAW,GAAG,QAAQ,EAAE;EACjE,OAAO7B,KAAK,CAACY,GAAG,CAAC,8CAA8C,EAAE;IAC7DE,MAAM,EAAE;MACJE,GAAG,EAAEf,WAAW;MAChB,mBAAmB,EAAE2B,MAAM,CAACN,GAAG;MAC/B,oBAAoB,EAAEM,MAAM,CAACF,GAAG;MAChCG;IACJ;EACJ,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACpB,IAAI,CAAC;AAC1B;;AAEA;AACA;AACA,OAAO,SAASqB,0BAA0BA,CAACJ,MAAM,EAAEK,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAGD,IAAI,EAAE;EAC1E,OAAOjC,KAAK,CAACY,GAAG,CAAC,0CAA0C,EAAE;IACzDE,MAAM,EAAE;MACJE,GAAG,EAAEf,WAAW;MAChB,mBAAmB,EAAE2B,MAAM,CAACN,GAAG;MAC/B,oBAAoB,EAAEM,MAAM,CAACF,GAAG;MAChCO,IAAI;MACJC;IACJ;EACJ,CAAC,CAAC,CACDJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACpB,IAAI,CAAC;AAC1B;;AAEA;AACA;AACA,OAAO,SAASwB,2BAA2BA,CAACP,MAAM,EAAEQ,KAAK,GAAG,EAAE,EAAEF,QAAQ,GAAGE,KAAK,EAAE;EAC9E,OAAOpC,KAAK,CAACY,GAAG,CAAC,2CAA2C,EAAE;IAC1DE,MAAM,EAAE;MACJE,GAAG,EAAEf,WAAW;MAChB,mBAAmB,EAAE2B,MAAM,CAACN,GAAG;MAC/B,oBAAoB,EAAEM,MAAM,CAACF,GAAG;MAChCU,KAAK;MACLF;IACJ;EACJ,CAAC,CAAC,CACDJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACpB,IAAI,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}